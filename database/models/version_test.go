// +build sqlboiler_test

// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVersions(t *testing.T) {
	t.Parallel()

	query := Versions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Versions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VersionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VersionExists(ctx, tx, o.Image)
	if err != nil {
		t.Errorf("Unable to check if Version exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VersionExists to return true, but got false.")
	}
}

func testVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	versionFound, err := FindVersion(ctx, tx, o.Image)
	if err != nil {
		t.Error(err)
	}

	if versionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Versions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Versions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	versionOne := &Version{}
	versionTwo := &Version{}
	if err = randomize.Struct(seed, versionOne, versionDBTypes, false, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}
	if err = randomize.Struct(seed, versionTwo, versionDBTypes, false, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = versionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = versionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Versions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	versionOne := &Version{}
	versionTwo := &Version{}
	if err = randomize.Struct(seed, versionOne, versionDBTypes, false, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}
	if err = randomize.Struct(seed, versionTwo, versionDBTypes, false, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = versionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = versionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func versionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func versionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Version) error {
	*o = Version{}
	return nil
}

func testVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Version{}
	o := &Version{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, versionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Version object: %s", err)
	}

	AddVersionHook(boil.BeforeInsertHook, versionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	versionBeforeInsertHooks = []VersionHook{}

	AddVersionHook(boil.AfterInsertHook, versionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	versionAfterInsertHooks = []VersionHook{}

	AddVersionHook(boil.AfterSelectHook, versionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	versionAfterSelectHooks = []VersionHook{}

	AddVersionHook(boil.BeforeUpdateHook, versionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	versionBeforeUpdateHooks = []VersionHook{}

	AddVersionHook(boil.AfterUpdateHook, versionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	versionAfterUpdateHooks = []VersionHook{}

	AddVersionHook(boil.BeforeDeleteHook, versionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	versionBeforeDeleteHooks = []VersionHook{}

	AddVersionHook(boil.AfterDeleteHook, versionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	versionAfterDeleteHooks = []VersionHook{}

	AddVersionHook(boil.BeforeUpsertHook, versionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	versionBeforeUpsertHooks = []VersionHook{}

	AddVersionHook(boil.AfterUpsertHook, versionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	versionAfterUpsertHooks = []VersionHook{}
}

func testVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(versionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VersionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Versions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	versionDBTypes = map[string]string{`Image`: `character varying`, `Version`: `character varying`}
	_              = bytes.MinRead
)

func testVersionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(versionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(versionAllColumns) == len(versionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, versionDBTypes, true, versionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(versionAllColumns) == len(versionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Version{}
	if err = randomize.Struct(seed, o, versionDBTypes, true, versionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, versionDBTypes, true, versionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(versionAllColumns, versionPrimaryKeyColumns) {
		fields = versionAllColumns
	} else {
		fields = strmangle.SetComplement(
			versionAllColumns,
			versionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VersionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(versionAllColumns) == len(versionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Version{}
	if err = randomize.Struct(seed, &o, versionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Version: %s", err)
	}

	count, err := Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, versionDBTypes, false, versionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Version struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Version: %s", err)
	}

	count, err = Versions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
